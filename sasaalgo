def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1


arr = [1, 2, 3, 5, 8]
target = 6
result = binary_search(arr, target)
if result != -1:
    print(f"Element found at index {result}")
else:
    print("Element not found")

arr = [1, 2, 3, 5, 8]
target = 5
result = binary_search(arr, target)
if result != -1:
    print(f"Element found at index {result}")
else:
    print("Element not found")


def power(number, power_number):
    return number**power_number


result = power(3, 4)
print(result)

# bubble
array = [29, 13, 22, 37, 52, 49, 46, 71, 56]
for i in range(len(array)):
    for j in range(0, len(array)-i-1):
        if array[i] > array[i+1]:
            array[i], array[i+1] = array[i+1], array[i]
        else:
            continue
print(array)


def merge(left, right):

    merged = []
    left_index, right_index = 0, 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1

    merged.extend(left[left_index:])
    merged.extend(right[right_index:])

    return merged


left_list = [1, 3, 5, 7]
right_list = [2, 4, 6, 8]
result = merge(left_list, right_list)
print(result)


def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)


arr = [3, 6, 8, 10, 1, 2, 1]
print(quicksort(arr))  
